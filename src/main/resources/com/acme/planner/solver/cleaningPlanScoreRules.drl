package com.acme.planning.housecleaning;
    dialect "java"

//import org.optaplanner.core.api.score.buildin.hardsoft.HardSoftScoreHolder;

import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.Month;
import java.util.Calendar;

import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScoreHolder;

import com.acme.planning.model.HouseCleaningSpot;
import com.acme.planning.model.Cleaner;
import com.acme.planning.model.ShiftDate;

//global HardSoftScoreHolder scoreHolder;
global HardMediumSoftScoreHolder scoreHolder;

// ############################################################################
// Hard constraints
// ############################################################################
//rule "Conflict: 1 cleaner has to clean 2 houses on the same day of week"
//when
   //HouseCleaningSpot($c : cleaner, cleaner != null, $d : house.dayOfWeek.dayId, $leftId : id)
   //HouseCleaningSpot(cleaner == $c, house.dayOfWeek.dayId == $d, id > $leftId)
//then
   //scoreHolder.addHardConstraintMatch(kcontext, -1);
//end

rule "Conflict: 1 cleaner has to clean 2 houses on the same day of week"
when
   HouseCleaningSpot($c : cleaner, cleaner != null, $d : house.shiftDate.shiftId, $leftId : id)
   HouseCleaningSpot(cleaner == $c, house.shiftDate.shiftId == $d, id > $leftId)
then
   scoreHolder.addHardConstraintMatch(kcontext, -1);
end

rule "max work week limit rule"
when
   $cleaner : Cleaner($maxWorkHours : maxWorkHours)
   HouseCleaningSpot($b : house.shiftDate.workDate, $dow : house.shiftDate.dow, $a : house.shiftDate.workDate.plusDays(6), $m : house.shiftDate.workDate.getMonth())
   $total  : Number(intValue() > $maxWorkHours) 
   				from accumulate(
   								HouseCleaningSpot(cleaner == $cleaner,
   								house.shiftDate.workDate >= $b && house.shiftDate.workDate <= $a,
   								$hours : cleaner.dailyWorkHours),
   								sum($hours)
   				)
   		
then
   System.out.println("Prabakar Testing!!!!");
   scoreHolder.addHardConstraintMatch(kcontext, -1);
end

// ############################################################################
// Medium constraints
// ############################################################################

rule "overconstrained: leave as little possible unassigned spots"
    when
        HouseCleaningSpot(cleaner == null)
    then
        scoreHolder.addMediumConstraintMatch(kcontext, -1);
end

// ############################################################################
// Soft constraints
// ############################################################################

rule "Minimize traveling distance"
when
   HouseCleaningSpot($d : distanceFromCleanerToHouse)
then
   scoreHolder.addSoftConstraintMatch(kcontext, -$d);
   //int a = 1;
   //System.out.println("Step is now ::: "+a++);
end
